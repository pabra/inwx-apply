name: publish

on:
  push:
    # tags:
    #   - 'v*'
    branches:
      - dev

jobs:
  # publish-npm:
  #   runs-on: ${{ matrix.os }}
  #
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #       node: [14]
  #
  #   name: ${{ matrix.os }} Node ${{ matrix.node }} publish npm
  #
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #
  #     - uses: actions/setup-node@v2
  #       with:
  #         node-version: ${{ matrix.node }}
  #         registry-url: https://registry.npmjs.org/
  #
  #     - name: Get npm cache directory
  #       id: npm-cache
  #       run: |
  #         echo "::set-output name=dir::$(npm config get cache)"
  #
  #     - uses: actions/cache@v2
  #       id: cache
  #       with:
  #         path: ${{ steps.npm-cache.outputs.dir }}
  #         key: ${{ runner.os }}-node-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-node-${{ matrix.node }}-
  #           ${{ runner.os }}-node-
  #
  #     - name: publish
  #       env:
  #         NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
  #       run: |
  #         set -e
  #         npm ci
  #         npm run test:before-publish
  #         npm publish

  publish-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: get package.json
        id: package_json
        run: |
          PACKAGE_JSON="$( cat package.json )"
          echo ::set-output name=json::${PACKAGE_JSON}

      - name: debug package.json
        run: |
          set -ex
          echo 'json: ${{ steps.package_json.outputs.json }}'
          echo "fromJSON: '${{ fromJSON(steps.package_json.outputs.json) }}'"
          echo "author: '${{ fromJSON(steps.package_json.outputs.json).author }}'"
          echo "scripts.test-quot1: '${{ fromJSON(steps.package_json.outputs.json).scripts['test-quot1'] }}'"
          echo "scripts.test-quot2: '${{ fromJSON(steps.package_json.outputs.json).scripts['test-quot2'] }}'"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: pabra/inwx-apply

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=pabra/inwx-apply:buildcache
          cache-to: type=registry,ref=pabra/inwx-apply:buildcache,mode=max
